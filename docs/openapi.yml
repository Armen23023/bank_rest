openapi: 3.0.3
info:
  title: Bank Cards API
  version: 1.0.0
  description: API documentation for Bank Cards service
  contact:
    name: Armen Mirzoyan
    email: mirzoyana805@gmail.com
    url: https://github.com/Armen23023
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /api/v1/admin/users:
    get:
      tags:
        - Admin API
      summary: Get all users
      description: >
        Retrieves a paginated list of all registered users.
        You can filter the results using search parameters,
        and pagination is supported via standard `page`, `size`, and `sort` query parameters.
      parameters:
        - in: query
          name: includeBlocked
          schema:
            type: boolean
          description: Whether to include blocked users in the response.
          example: true
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
          description: Page number (zero-based).
          example: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
          description: Number of records per page.
          example: 20
        - in: query
          name: sort
          schema:
            type: string
          description: Sorting criteria in the format property,(asc|desc).
          example: lastName,asc
      responses:
        '200':
          description: Successfully returns all registered users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserToAdminResponseDto'
        '401':
          description: Unauthorized — missing or invalid authentication token.
        '403':
          description: Forbidden — authenticated but not allowed to access this resource.

  /api/v1/admin/users/{ref}:
    get:
      tags: [Admin API]
      summary: Get user by reference
      description: Retrieves detailed information about a user by their UUID reference.
      parameters:
        - name: ref
          in: path
          required: true
          description: User UUID reference
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully returns user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToAdminDetailedResponseDto'
        '404':
          description: User not found

    put:
      tags: [Admin API]
      summary: Update user
      description: Updates the status or attributes of a user, change user status to blocked.
      parameters:
        - name: ref
          in: path
          required: true
          description: User UUID reference
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateAdminRequestDto'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid request
        '404':
          description: User not found

  /api/v1/admin/cards:
    get:
      tags: [Admin API]
      summary: Get all cards
      description: Retrieves a paginated list of cards, filtered by search parameters.
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
        - in: query
          name: sort
          schema: { type: string }
        - in: query
          name: cardRef
          schema: { type: string }
          description: Card reference
        - in: query
          name: cardStatus
          schema: { type: string }
          description: Card status (e.g., ACTIVE, BLOCKED)
        - in: query
          name: ownerRef
          schema: { type: string }
          description: User reference who owns the card
        - in: query
          name: cardType
          schema: { type: string }
          description: Card type (e.g., VISA, MASTERCARD)
        - in: query
          name: cardNumber
          schema: { type: string }
          description: Card number
      responses:
        '200':
          description: Successfully returns cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponseDto'

    post:
      tags: [Admin API]
      summary: Create card
      description: Creates a new card for a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequestDto'
      responses:
        '200':
          description: Card successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'

  /api/v1/admin/cards/{ref}/block:
    put:
      tags: [Admin API]
      summary: Block card
      description: Blocks a card by its UUID reference.
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Card successfully blocked

  /api/v1/admin/cards/{ref}/activate:
    put:
      tags: [Admin API]
      summary: Activate card
      description: Activates a previously blocked card.
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Card successfully activated

  /api/v1/admin/cards/{ref}:
    delete:
      tags: [Admin API]
      summary: Delete card
      description: Deletes a card by its ID reference.
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Card successfully deleted

  /api/v1/signin:
    post:
      tags:
        - Authentication
      summary: Sign in with username and password
      description: Authenticates the user and returns an access + refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestDto'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseDto'
        '401':
          description: Invalid username or password

  /api/v1/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generates a new access token using a refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '200':
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseDto'
        '401':
          description: Invalid or expired refresh token

  /api/v1/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with provided signup details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestDto'
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: string
                example: User registered successfully
        '400':
          description: Invalid request (validation failed)
        '409':
          description: User with this email already exists

  /api/v1/users/cards:
    get:
      tags:
        - User API
      summary: Get all user cards
      description: Returns a paginated list of the current user’s cards
      parameters:
        - in: query
          name: searchKey
          schema:
            type: string
          description: Search keyword
        - in: query
          name: ignoreDeleted
          schema:
            type: boolean
          description: Ignore deleted archives
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
          description: Page number (zero-based)
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
          description: Number of records per page
        - in: query
          name: sort
          schema:
            type: string
          description: Sorting criteria
      responses:
        '200':
          description: Successfully returns paginated list of cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCardsResponseDto'

  /api/v1/users/cards/{ref}:
    get:
      tags:
        - User API
      summary: Get card details
      parameters:
        - in: path
          name: ref
          required: true
          schema:
            type: string
            format: uuid
          description: Card reference
      responses:
        '200':
          description: Card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCardsResponseDto'
        '404':
          description: Card not found

  /api/v1/users/cards/{ref}/block-request:
    post:
      tags:
        - User API
      summary: Request card block
      parameters:
        - in: path
          name: ref
          required: true
          schema:
            type: string
            format: uuid
          description: Card reference
      responses:
        '200':
          description: Block request submitted successfully
          content:
            application/json:
              schema:
                type: string
                example:
                  Block request submitted for card: 75630641-f3e5-4a85-a778-fe8443cc039f

  /api/v1/users/cards/transfer:
    post:
      tags:
        - User API
      summary: Transfer funds between cards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTransactionRequestDto'
      responses:
        '200':
          description: Transaction completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionResponseDto'
        '400':
          description: Invalid request
        '403':
          description: Forbidden

  /api/v1/users/cards/{ref}/balance:
    get:
      tags:
        - User API
      summary: Get card balance
      parameters:
        - in: path
          name: ref
          required: true
          schema:
            type: string
            format: uuid
          description: Card reference
      responses:
        '200':
          description: Returns the card balance
          content:
            application/json:
              schema:
                type: string
                example: "150.70"
        '404':
          description: Card not found


components:
  schemas:

    UserUpdateAdminRequestDto:
      type: object
      properties:
        blocked:
          type: boolean
          description: Blocked
          example: true

    UserAdminSearchRequestDto:
      type: object
      properties:
        includeBlocked:
          type: boolean
          description: Include blocked in the response
          example: true

    UserToAdminResponseDto:
      type: object
      properties:
        ref:
          type: string
          format: uuid
          description: Reference
          example: 0be8df4e-7d3a-4037-b4dc-cf44a51c617e
        firstName:
          type: string
          description: First Name
          example: John
        lastName:
          type: string
          description: Last Name
          example: Doe
        blocked:
          type: boolean
          description: Deleted / Blocked
          example: true
        email:
          type: string
          format: email
          description: Email
          example: john.doe@gmail.com

    UserToAdminDetailedResponseDto:
      allOf:
        - $ref: '#/components/schemas/UserToAdminResponseDto'
        - type: object
          properties:
            deletedDateTime:
              type: string
              format: date-time
              description: Delete date time
              example: 2023-08-19T15:34:52
            createdDate:
              type: string
              format: date-time
              description: Created date
              example: 2023-08-19T15:34:52

    CardSearchRequestDto:
      type: object
      properties:
        cardRef:
          type: string
          description: Card ref
        cardStatus:
          type: string
          description: Card status
          example: BLOCKED
        ownerRef:
          type: string
          description: User ref
        cardType:
          type: string
          description: Card type
          example: VISA
        cardNumber:
          type: string
          description: Card number
          example: 4000000202939460

    CardCreateRequestDto:
      type: object
      required: [userRef, type]
      properties:
        userRef:
          type: string
          format: uuid
          description: User ref
          example: 75630641-f3e5-4a85-a778-fe8443cc039f
        type:
          type: string
          description: Card type
          example: VISA

    CardResponseDto:
      type: object
      properties:
        ref:
          type: string
          format: uuid
        type:
          type: string
        status:
          type: string

    SigninRequestDto:
      type: object
      properties:
        username:
          type: string
          description: Username
          example: joh.doe
        password:
          type: string
          description: Password
          example: StrongPassw@rd!@#
      required:
        - username
        - password

    RefreshTokenRequestDto:
      type: object
      properties:
         refreshToken:
          type: string
          description: Refresh token required for signin
      required:
        - refreshToken

    SigninResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The access token that needs to be used on the service to access APIs
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb2guZG9lIiwiaWF0IjoxNjkxNzA4MDAwfQ.dQw4w9WgXcQ
        refreshToken:
          type: string
          description: The refresh token that needs to be used to refresh access token
          example: e04a99ac-1234-4aef-8b44-6c3cb12e91f1

    SignupRequestDto:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
          example: John
        lastName:
          type: string
          description: Last name of the user
          example: Doe
        email:
          type: string
          description: Email address
          example: john.doe@gmail.com
        password:
          type: string
          description: Password for the account
          example: StrongPassw@rd!@#
      required:
        - firstName
        - email
        - password

    CardTransactionRequestDto:
      type: object
      properties:
        outputCardRef:
          type: string
          format: uuid
          description: Reference of the card to transfer money from
          example: 75630641-f3e5-4a85-a778-fe8443cc039f
        inputCardRef:
          type: string
          format: uuid
          description: Reference of the card to transfer money to
          example: 12345678-abcd-4e56-9876-fe8443cc9876
        amount:
          type: number
          format: double
          description: Amount to transfer
          example: 150.75
      required:
        - outputCardRef
        - inputCardRef
        - amount

    UserAllCardsRequestDto:
      type: object
      properties:
        searchKey:
          type: string
          description: Search keyword
        ignoreDeleted:
          type: boolean
          description: Ignore deleted archives

    CardTransactionResponseDto:
      type: object
      properties:
        targetCardBalance:
          type: number
          format: double
          description: Balance of the target card after transaction
          example: 1200.50
        sourceCardBalance:
          type: number
          format: double
          description: Balance of the source card after transaction
          example: 350.75
        amount:
          type: number
          format: double
          description: Transferred amount
          example: 150.00
        timestamp:
          type: string
          format: date-time
          description: Transaction timestamp
          example: 2025-09-26T15:30:00

    UserCardsResponseDto:
      type: object
      properties:
        ref:
          type: string
          format: uuid
          description: Card reference
        number:
          type: string
          description: Card number
        type:
          type: string
          description: Card type
          example: VISA
        owner:
          type: string
          description: Card owner name
          example: ARMEN MIRZOYAN
        expirationDate:
          type: string
          format: date
          description: Expiration date
          example: 2028-09-26
        status:
          type: string
          description: Card status
          example: ACTIVE
        balance:
          type: number
          format: double
          description: Card balance
          example: 150.7